#!/bin/sh 
# the next line restarts using expect interpreter \
   exec expect "$0" "$@"

##!/usr/bin/expect --
#***************************************************************************
#    Copyright (C) 2006 by Michael Ambrus                                  *
#    ambrmi09@gmail.com                                                    *
#                                                                          *
#    This program is free software; you can redistribute it and/or modify  *
#    it under the terms of the GNU General Public License as published by  *
#    the Free Software Foundation; either version 2 of the License, or     *
#    (at your option) any later version.                                   *
#                                                                          *
#    This program is distributed in the hope that it will be useful,       *
#    but WITHOUT ANY WARRANTY; without even the implied warranty of        *
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
#    GNU General Public License for more details.                          *
#                                                                          *
#    You should have received a copy of the GNU General Public License     *
#    along with this program; if not, write to the                         *
#    Free Software Foundation, Inc.,                                       *
#    59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
#***************************************************************************/

# This program creates a generic TCP server on the host invoked from and 
# on a port given at command line. 

# The basic idea is that whence up and running any protocol itself is put
# "on top" of this progam, communicating with it via stdin and stdout.

# I.e. Protocols becomes very easy to develop, since one can do it for
# simple local terminal io first, and then automagically youre done ;)
# Just start the tcpservlet and pipe it with you protocol implementation.

# Do the following cool stuff (and you'll have a working rlogin server ;) ):
# mkfifo mypipe
# ./tcpservlet.tcl <mypipe | bash -i -l >mypipe 2>&1
#  rm mypipe

#Might work on sertain systems
# exec 3<>tempfile
# ./tcpservlet.tcl 0<&3 | protocol_prog 1>&3
# exec 3>&-

set LOG_FNAME "~/tcpservlet"
exp_internal 0
log_user 0
exp_internal -f ${LOG_FNAME}-int.log 0
set logfile [open ${LOG_FNAME}.log "a"]

puts $logfile "Prog started"; flush $logfile

#Setting default portnumber
set port 9900

#Getting another one from arguments (if avaiable)
regexp "(port=)(\[^ ]*)" $argv var0 var1 port
regexp "(-p *)(\[^ ]*)" $argv var0 var1 port
regexp "(--port +)(\[^ ]*)" $argv var0 var1 port

trap {
	puts $logfile "--> tcpservlet: SIGINT trapped"
	flush $logfile
	close $logfile
	exit 14
} SIGINT


proc Server {channel clientaddr clientport} {	
	set logfile [open ~/tcpservlet.log "a"]
	puts $logfile "Connection from $clientaddr registered"; flush $logfile
	spawn -open $channel
        interact {
	#Server side patterns (i.e. maching from stdin)
		\003 {
			puts $logfile "-->tcpservlet: ETX/Ctrl-C i.e. SIGINT in cooked mode"
			flush $logfile
			#send "\003"
			close
			close $logfile
			exit 0
			}
		eof {
			puts $logfile "tcpservlet: Server side EOF detected"
			flush $logfile
			#send "\003"
			close
			close $logfile
			exit 0
			}
		-re "diediedie" {
			puts $logfile "tcpservlet: Secret diediedie command received from SERVER"; flush $logfile
			close
			return
			}
		-re "diebiach" {
			puts $logfile "tcpservlet: Secret diebiach command received from SERVER"; flush $logfile
			close
			exit 0
			}
		-re "(.*)\r" {
			send $interact_out(1,string)\n
			puts $logfile ">>> $interact_out(1,string)"; flush $logfile
			}
		-re "(.*)\n" {
			send $interact_out(1,string)\n
			puts $logfile "--> $interact_out(1,string)"; flush $logfile
			}
		-re "(.* \$)" {
			send $interact_out(1,string)
			puts $logfile "--> $interact_out(1,string)"; flush $logfile
			}
		#Remote GDB packets pattern matching starts here:
		-re  "(.*)" {
			send $interact_out(1,string);
			puts $logfile ">*> $interact_out(1,string)"; flush $logfile
			}
	#Client side patterns
		-o 
		"diediedie" {
			puts $logfile "tcpservlet: Secret diediedie command received from CLIENT"; flush $logfile
			close
			return		
			}
		"diebiach" {
			puts $logfile "tcpservlet: Secret diebiach command received from CLIENT"; flush $logfile
			close
			exit 0
			}
		"miffo" { send "tcpservlet: Whatyawhanna?" }
		eof {
			puts $logfile "tcpservlet: Client side EOF detected"; flush $logfile
			#close
			return
			}
		\u00ff\u00f4\u00ff\u00fd\u0006 {
			puts $logfile "tcpservlet: Ctrl-C from client received WM"; flush $logfile			
			#The following isnt working. Close should SIGINT the spawned proc
			#close
			#send_user -raw "\u00ff\u00f4\u00ff\u00fd\u0006"
			#exec kill -9 spawn_id
			send_user -raw eof
			send_user -raw "\u00ff\u00f4\u00ff\u00fd\u0006"
			close			
			#return
			exit 0
			}
		-re "(.*)\r\n" {
			send_user -raw $interact_out(1,string)\n
			puts $logfile "<<< $interact_out(1,string)"; flush $logfile
			}
#Remote GDB packets pattern matching starts here:
		-re  "(.*)" {
			puts -nonewline stdout $interact_out(1,string); flush stdout
			puts $logfile "<*< $interact_out(1,string)"; flush $logfile
			}

	}
	puts $logfile "tcpservlet: Closing channel"; flush $logfile
	#closed allready and spawned process (i.e. the socket stream)
	#close $channel
}

puts $logfile "tcpservlet: Starting tcpservlet at port $port"; flush $logfile 
socket -server Server $port
vwait forever
#close $logfile
